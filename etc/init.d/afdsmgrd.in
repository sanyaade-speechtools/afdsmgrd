#!/bin/bash

#
# init.d/afdsmgrd -- by Dario Berzano <dario.berzano@cern.ch>
#
# This file is part of afdsmgrd -- see http://code.google.com/p/afdsmgrd
#
# This script is conform to the LSB specifications and it is compatible with
# the chkconfig custom header format. It can also be run by an unprivileged
# user and without being installed system-wide.
#

#
# chkconfig header
#

# chkconfig: 2345 99 0
# description: afdsmgrd, which stands for Analysis Facility Dataset Manager
#              Daemon, is a ROOT-based daemon that scans the stored datasets in
#              order to issue the actual data staging
# processname: afdsmgrd
# pidfile: /var/run/afdsmgrd.pid

#
# LSB header
#

### BEGIN INIT INFO
# Provides: afdsmgrd
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Required-Start: $local_fs $network
# Required-Stop: $local_fs $network
# Short-Description: Dataset manager for PROOF-based AFs
# Description: afdsmgrd, which stands for Analysis Facility Dataset Manager
#              Daemon, is a ROOT-based daemon that scans the stored datasets in
#              order to issue the actual data staging
### END INIT INFO

#
# External libraries and global variables
#

# Basename of the script
export BASENAME=`readlink "$0"`
[ "$BASENAME" == "" ] && BASENAME="$0"
BASENAME=`basename "$BASENAME"`

# Get the configuration variables from the first configuration file found
declare -a CONF_FILES
CONF_FILES=(
  "@DIR_ETC@/sysconfig/$BASENAME" \
  "@DIR_ETC@/default/$BASENAME" \
  "/etc/sysconfig/$BASENAME" \
  "/etc/default/$BASENAME" \
  "$HOME/.$BASENAME.cf"
)

for CF in "${CONF_FILES[@]}"; do
  if [ -r "$CF" ]; then
    if [ "$1" == "sysconfig" ]; then
      echo "Using configuration file $CF"
      exit 0
    fi
    source "$CF"
    break
  fi
done

unset CF

# Full path of program
export PROG="$AFDSMGRD_PROG"

# Silently fails if program is missing (for spurious init.d scripts)
[ -x "$PROG" ] || exit 0

# Basename of program
export BASEPROG=`basename "$PROG"`

# File that holds the PID
export PIDFILE="$AFDSMGRD_PIDFILE"

# Log file
export LOGFILE="$AFDSMGRD_LOGFILE"

# Log dir
export LOGDIR="$AFDSMGRD_LOGDIR"

# Configuration file
export CONF="$AFDSMGRD_CONF"

# Daemon user
export SUSER="$AFDSMGRD_USER"

# Log level
export LOG_LEVEL="$AFDSMGRD_LOGLEVEL"

# Temporary directory (hardcoded)
export TEMPDIR="/tmp/afdsmgrd"

# ROOT script (hardcoded)
export ROOTLAUNCHER="$TEMPDIR/root_launcher.sh"

#
# Functions
#

# Auxiliary messaging function: normal echo
function Msg() {
  echo "$@"
}

# Auxiliary messaging function: begin of operation
function MsgBegin() {
  echo -n "$@: "
}

# Auxiliary messaging function: end of operation
function MsgEnd() {
  local STATUS
  [ "$1" == 0 ] && STATUS="\033[1;32mOK\033[m" || STATUS="\033[1;31mfailed\033[m"
  shift
  if [ "$*" != "" ]; then
    echo -e "$STATUS ($@)"
  else
    echo -e "$STATUS"
  fi
}

# Echoes the PID of the program if running; empty string otherwise
function GetPid() {
  local PID=`cat "$PIDFILE" 2> /dev/null`
  kill -0 "$PID" 2> /dev/null && echo $PID
}

# Tries to stop, then kills the specified PID
function StopKill() {
  local PID="$1"
  kill -15 "$PID" 2> /dev/null
  for ((I=0; $I<3; I++)); do
    sleep 1
    kill -0 "$PID" 2> /dev/null
    [ $? != 0 ] && return 0
  done
  kill -9 "$PID" 2> /dev/null
  sleep 1
  kill -0 "$PID" 2> /dev/null && return 1 || return 0
}

# Cleanup of daemon's temporary directory: called on startup and shutdown. This
# is the first function to customize
function Cleanup() {
  rm -rf "$TEMPDIR"
  return $?
}

# This is the second function to edit: it contains the custom commands to
# effectively launch the daemon
function LaunchDaemon() {

  # Creates temporary directory
  Cleanup
  mkdir -p "$TEMPDIR"
  chmod -R u=rwX,g=rX,o=rX "$TEMPDIR" > /dev/null 2>&1
  chown -R "$SUSER" "$TEMPDIR" > /dev/null 2>&1

  # Change permissions of log directory
  mkdir -p "$LOGDIR" > /dev/null 2>&1
  touch "$LOGFILE" > /dev/null 2>&1
  chmod -R u=rwX,g=rX,o=rX "$LOGDIR" > /dev/null 2>&1
  chown -R "$SUSER" "$LOGDIR" > /dev/null 2>&1

  # Creates directory for pidfile (if not exists)
  mkdir -p $(dirname "$PIDFILE")

  # This is a setuid program: for security reasons, LD_LIBRARY_PATH is not
  # inherited in the environment inside the daemon
  ( export LD_LIBRARY_PATH="$ROOTSYS/lib:$AFDSMGRD_LIBS:$LD_LIBRARY_PATH" ; \
    "$AFDSMGRD_PROG" -b -u "$SUSER" -p "$PIDFILE" -c "$CONF" -d "$LOG_LEVEL" \
    -l "$LOGFILE" -e "$AFDSMGRD_LIBEXEC" > /dev/null 2>&1 )

  return $?
}

# Starts the daemon (if not running)
function Start() {
  local PID RETVAL
  MsgBegin "Starting $BASEPROG"
  PID=`GetPid`
  if [ "$PID" == "" ]; then
    LaunchDaemon
    RETVAL=$?
    MsgEnd $RETVAL
  else
    MsgEnd 1 "already running with PID=$PID"
    RETVAL=1
  fi
  return $RETVAL
}

# Stops the daemon
function Stop() {
  local PID RETVAL
  MsgBegin "Stopping $BASEPROG"
  PID=`GetPid`
  if [ "$PID" == "" ]; then
    MsgEnd 0 "not running"
    RETVAL=0
  else
    StopKill $PID
    RETVAL=$?
    if [ $RETVAL == 0 ]; then
      rm -f "$PIDFILE"
      Cleanup
    fi
    MsgEnd $RETVAL
  fi
  return $RETVAL
}

# Status of the daemon; returns 0 if running, nonzero otherwise
function Status() {
  local PID
  PID=`GetPid`
  if [ "$PID" == "" ]; then
    Msg "$BASEPROG is not running"
    return 1
  else
    Msg "$BASEPROG is running with PID=$PID"
    return 0
  fi
}

# Last lines of log
function ShowLog() {
  Status
  if [ $? == 0 ]; then
    echo "Showing last lines of $LOGFILE with tail -f (abort with Ctrl+C):"
    tail -f "$LOGFILE"
  fi
}

#
# Entry point
#

case "$1" in
  start)
    Start
    exit $?
  ;;
  stop)
    Stop
    exit $?
  ;;
  status)
    Status
    exit 0
  ;;
  log)
    ShowLog
    exit 0
  ;;
  restart|condrestart|reload)
    Stop && Start
    exit $?
  ;;
  #drain)
  # to be implemented
  #;;
  *)
    echo  "Usage: `basename $0` {start|stop|restart|condrestart|reload|status|log}"
    exit 1
  ;;
esac






# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
#                                                                             #
#                    NO ADMITTANCE BEYOND THIS POINT :)                       #
#                                                                             #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

exit 0






start() {
  echo -n "Starting $PROG..."
  pidofproc "$AFDSMGRD_PROG" > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo "done (already running)"
    return 0
  fi

  # Cleans up remaining trash from previous runs in /tmp
  cleanup

  # Creates proper environment and logdir
  export LD_LIBRARY_PATH=$AFDSMGRD_LIBS:$LD_LIBRARY_PATH
  mkdir -p $AFDSMGRD_LOGDIR
  chown -R $AFDSMGRD_USER:$AFDSMGRD_GROUP $AFDSMGRD_LOGDIR
  touch $AFDSMGRD_LOGFILE
  chown $AFDSMGRD_USER:$AFDSMGRD_GROUP $AFDSMGRD_LOGFILE
  [ $AFDSMGRD_DEBUG -eq 1 ] && EXTRAOPTS=-d

  $AFDSMGRD_PROG -c $AFDSMGRD_CONF -R $AFDSMGRD_USER -b -l $AFDSMGRD_LOGFILE \
    -p $AFDSMGRD_PIDFILE $EXTRAOPTS
  RETVAL=$?

  [ $RETVAL -eq 0 ] && echo "done" || echo "failed"
  return $RETVAL
}

stop() {
  echo -n "Stopping $PROG..."
  killproc $AFDSMGRD_PROG
  RETVAL=$?
  [ $RETVAL -eq 0 ] && rm -f $AFDSMGRD_PIDFILE
  [ $RETVAL -eq 0 ] && echo "done" || echo "failed"
  return $RETVAL
}

#
# Entry point
#

case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  status)
    status afdsmgrd
    RETVAL=$?
  ;;
  restart|reload)
    # Restarts the daemon; results in a start if daemon wasn't running
    stop
    start
  ;;
  condrestart)
    # Restarts the daemon only if it is running
    pidofproc "$AFDSMGRD_PROG" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
      stop
      start
    else
      echo "Not running, nothing to do"
    fi
  ;;
  *)
     echo  "Usage: $0 {start|stop|status|restart|reload|condrestart}"
     exit 1
  ;;
esac

exit $RETVAL
