#!/bin/bash

#
# afverify-xrd-locate.sh -- by Dario Berzano <dario.berzano@cern.ch>
#
# This file is part of afdsmgrd -- see http://code.google.com/p/afdsmgrd
#
# Wrapper around xrd locateall command, see macros/Verify.C for info on output.
#

# Get the configuration variables from the first configuration file found
declare -a CONF_FILES
CONF_FILES=(
  "@DIR_ETC@/sysconfig/afdsmgrd" \
  "@DIR_ETC@/default/afdsmgrd" \
  "/etc/sysconfig/afdsmgrd" \
  "/etc/default/afdsmgrd" \
  "$HOME/.afdsmgrd.cf"
)

for CF in "${CONF_FILES[@]}"; do
  if [ -r "$CF" ]; then
    source "$CF"
    break
  fi
done

# Classic xrootd (in EXTCMD_LIBS) and ROOT environment variables
export LD_LIBRARY_PATH="$AFDSMGRD_EXTCMD_LIBS:$ROOTSYS/lib:$LD_LIBRARY_PATH"
export PATH="$ROOTSYS/bin:$AFDSMGRD_EXTCMD_PATH:$PATH"

export URL="$1"

export ZIPCHECK=1
[ "$2" == "--nozipcheck" ] && ZIPCHECK=0

# URL parts
export HOSTPORT
export FILENAME
export REMAIN
export CLEANURL

# Split into host:port, filename and anchor; note that queries (?...) are not
# supported!
if [[ "$URL" =~ ^root://([^/]+)/([^\#\?]+)(.*)?$ ]]; then
  HOSTPORT=${BASH_REMATCH[1]}
  FILENAME=${BASH_REMATCH[2]}
  REMAIN=${BASH_REMATCH[3]}
  CLEANURL="root://$HOSTPORT/$FILENAME"
else
  echo "FAIL $URL Reason: cant_parse_url"
  exit 0
fi

# Launch xrd
export TMPOUT=$(mktemp /tmp/.afverifier-xrd-locate-XXXXX)
xrd $HOSTPORT locateall $FILENAME > $TMPOUT 2>&1
#echo $?

if [ $? != 0 ]; then
  rm $TMPOUT
  echo "FAIL $CLEANURL Reason: xrd_error"
  exit 0
fi

# Get Location: line
export LOCATION=$(cat $TMPOUT | grep "Location: " | head -n1)

# Parse location server
export ENDP_URL
if [[ $LOCATION =~ Location:\\s\'(.*)\' ]]; then

  ENDP_URL="root://${BASH_REMATCH[1]}/${FILENAME}"

  # Get file extension to lowercase
  EXT="${FILENAME##*.}"
  EXT=$(echo "$EXT" | tr '[:upper:]' '[:lower:]')

  # With option --nozipcheck as second argument, zip check might be skipped
  if [ "$EXT" == "zip" ] && [ $ZIPCHECK == 1 ]; then

    #
    # Additional zip integrity check if it is a zipfile
    #

    # Error values
    ERR_ZIP=42
    ERR_XRD=43

    # Script to execute on the remote host, kept inside a variable
    CHECKSCRIPT=$(cat <<EOF
#!/bin/bash
echo "Inside check script running on \$(hostname -f)"
export PATH="$PATH"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
TMPXRD=\$(mktemp /tmp/afverifier-xrd-zip-test.XXXXX)
RETVAL=0
xrdcp -f "$ENDP_URL" "\$TMPXRD"
if [ \$? == 0 ] && [ -s \$TMPXRD ]; then
  zip -T "\$TMPXRD" || RETVAL=$ERR_ZIP
else
  RETVAL=$ERR_XRD
fi
rm -f "\$TMPXRD"
exit \$RETVAL
EOF
)

    # Get the remote host
    REMOTE_HOST=$(echo ${BASH_REMATCH[1]}|cut -d: -f1)

    # Do we have to perform SSH?
    if [ $REMOTE_HOST == $(hostname -f) ] ||
       [ $REMOTE_HOST == $(hostname -s) ] ||
       [ $REMOTE_HOST == "localhost" ] ||
       [ $REMOTE_HOST == "127.0.0.1" ]
    then

      # No SSH needed: same machine
      echo "--> Running check locally"
      echo "$CHECKSCRIPT" | bash
      RETVAL=$?

    else

      # SSH needed
      echo "--> Running check remotely"
      echo "$CHECKSCRIPT" | ssh -oStrictHostKeyChecking=no $REMOTE_HOST
      RETVAL=$?

    fi

    # Result of check
    if [ $RETVAL == $ERR_XRD ]; then
      echo "FAIL $CLEANURL Reason: xrdcp_error"
      exit 0
    elif [ $RETVAL == $ERR_ZIP ]; then
      echo "FAIL $CLEANURL Reason: zip_error"
      exit 0
    elif [ $RETVAL != 0 ]; then
      echo "FAIL $CLEANURL Reason: zipcheck_unknown_err_$RETVAL"
      exit 0
    fi

  fi

  # Append the rest of endpoint URL (queries, anchors...)
  ENDP_URL="${ENDP_URL}${REMAIN}"
  echo "OK $CLEANURL EndpointUrl: $ENDP_URL"
else

  # File is not staged (empirically... bad xrd, bad...)
  cat $TMPOUT | grep 'matching files' > /dev/null 2>&1
  if [ $? == 0 ]; then
    echo "FAIL $CLEANURL Reason: not_staged"
  else
    #Â No reason given, generic error (server down, etc.)
    echo "FAIL $CLEANURL"
  fi

fi

rm -f $TMPOUT
